{"version":3,"file":"js/916.e97b161d.js","mappings":"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","sources":["webpack://tree-visualize/./src/pages/MapPage.vue","webpack://tree-visualize/./src/algorithm/Kruskal.js","webpack://tree-visualize/./src/algorithm/Dijkstra.js","webpack://tree-visualize/./src/utils/kruskal_graph.js","webpack://tree-visualize/./src/utils/other.js","webpack://tree-visualize/./src/pages/MapPage.vue?5a11"],"sourcesContent":["<template>\n    <main style=\"display: flex; flex-direction: column; min-width: 1500px; overflow: scroll;\">\n        <div\n            style=\"display: flex; font-size: 20px; color: #4a4a4a; font-weight: bold; padding: 10px; width: 100%; flex-direction: row;\">\n            <span>图算法可视化</span>\n        </div>\n        <div style=\"height: 2px; background-color: #8a8a8a; margin-bottom: 20px; width: 100%;\"></div>\n        <div style=\"display: flex; flex-direction: row-reverse; overflow: scroll; justify-content: center;\">\n            <div id=\"mountNode\"\n                style=\"border-radius: 10px; border: 2px #8a8a8a solid; width: 1200px; height: 800px; margin-right: 20px;\">\n            </div>\n            <div style=\"display: flex; flex-direction: column; margin-right: 20px; width: 350px;\">\n                <div style=\"display: flex; flex-direction: column;\">\n                    <div style=\"font-size:20px; font-weight: bold;\">\n                        算法部分<br />\n                        <span style=\"font-size: 18px;\">\n                            逐步运行算法\n                        </span>\n                    </div>\n                    <v-select variant=\"outlined\" v-model=\"algorithm\" label=\"选择算法\" density=\"compact\"\n                        style=\"max-height: 60px; width: 300px; margin-top: 10px;\"\n                        :items=\"['Kruskal最小生成树', 'Dijkstra最短路径']\">\n                    </v-select>\n\n                    <!-- 当选择 Dijkstra 时显示起始节点选择 -->\n                    <div v-if=\"algorithm === 'Dijkstra最短路径'\" style=\"margin-top: 10px;\">\n                        <v-select variant=\"outlined\" v-model=\"dijkstraSource\" label=\"选择起始节点\" density=\"compact\"\n                            style=\"max-height: 60px; width: 300px;\" :items=\"nodes\">\n                        </v-select>\n                    </div>\n\n                    <v-btn @click=\"step\" variant=\"tonal\" style=\"width: 300px; margin-bottom: 10px;\">执行算法</v-btn>\n                </div>\n\n                <div v-if=\"!ifRun\" style=\"display: flex; flex-direction: column;\">\n                    <div style=\"font-size:20px; font-weight: bold;\">\n                        绘制部分<br />\n                        <span style=\"font-size: 18px;\">\n                            双击画布创建新节点\n                        </span>\n                    </div>\n                    <div\n                        style=\"display: flex; flex-direction: row; justify-content: center; margin-top: 10px; width: 300px;\">\n                        <v-text-field variant=\"outlined\" v-model=\"source\" label=\"起始\" density=\"compact\"\n                            style=\"max-height: 60px; max-width: 150px; margin-right: 10px;\">\n                        </v-text-field>\n                        <v-text-field variant=\"outlined\" v-model=\"target\" label=\"终止\" density=\"compact\"\n                            style=\"max-height: 60px; max-width: 150px;\">\n                        </v-text-field>\n                        <v-text-field variant=\"outlined\" v-model=\"val\" label=\"权值\" density=\"compact\"\n                            style=\"max-height: 60px; max-width: 150px;\">\n                        </v-text-field>\n                    </div>\n                    <v-btn @click=\"addEdge\" variant=\"tonal\" style=\"width: 300px; margin-top: 10px;\">添加边</v-btn>\n                    <v-btn @click=\"drawBack\" variant=\"tonal\" style=\"width: 300px; margin-top: 10px;\">撤销绘制</v-btn>\n                </div>\n\n                <!-- Dijkstra 距离表格展示 -->\n                <div v-if=\"algorithm === 'Dijkstra最短路径'\" style=\"margin-top: 20px;\">\n                    <div>当前算法: {{ algorithm }}</div> <!-- 调试信息 -->\n                    <div style=\"font-size:20px; font-weight: bold;\">\n                        距离表\n                    </div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>节点</th>\n                                <th>距离</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr v-for=\"item in distanceItems\" :key=\"item.node\">\n                                <td>{{ item.node }}</td>\n                                <td>{{ item.distance }}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </main>\n</template>\n\n<script>\nimport { Kruskal } from '@/algorithm/Kruskal';\nimport { Dijkstra } from '@/algorithm/Dijkstra';\nimport GraphDraw from '@/utils/kruskal_graph';\nimport { edgeIncludes } from '@/utils/other';\nimport { isNumericString } from '@/utils/tree_funcs';\n\nexport default {\n    name: 'TreeGraph',\n    data() {\n        return {\n            data: {\n                nodes: [],\n                edges: [],\n            },\n            graphDraw: null,\n            file: null,\n            algorithm: null,\n            source: null,\n            target: null,\n            val: null,\n            ifRun: false,\n            kruskal: null,\n            dijkstra: null,\n            dijkstraSource: null,\n            nodes: [], // 使用简单的字符串数组\n            dijkstraDistances: {}, // 用于存储 Dijkstra 距离的数据\n            distanceHeaders: [\n                { text: '节点', value: 'node' },\n                { text: '距离', value: 'distance' },\n            ],\n        }\n    },\n    computed: {\n        distanceItems() {\n            const items = Object.keys(this.dijkstraDistances).map(node => ({\n                node: node,\n                distance: this.dijkstraDistances[node] === Infinity ? '∞' : this.dijkstraDistances[node]\n            }));\n            console.log(\"Computed distanceItems:\", items); // 调试信息\n            return items;\n        }\n    },\n    methods: {\n        step() {\n            if (this.algorithm == null) {\n                window.alert(\"选择一个算法\");\n                return;\n            }\n            if (this.algorithm === 'Kruskal最小生成树') {\n                if (this.ifRun == false) {\n                    this.ifRun = true;\n                    this.kruskal = new Kruskal(this.graphDraw);\n                }\n                if (!this.kruskal.step()) {\n                    window.alert(\"算法已运行完毕\")\n                }\n            } else if (this.algorithm === 'Dijkstra最短路径') {\n                console.log(\"Before any updates, dijkstraDistances:\", this.dijkstraDistances); // 调试信息\n                if (this.dijkstraSource == null) {\n                    window.alert(\"请选择 Dijkstra 的起始节点\");\n                    return;\n                }\n                if (this.ifRun == false) {\n                    this.ifRun = true;\n                    this.dijkstra = new Dijkstra(this.graphDraw, this.dijkstraSource);\n                    console.log(\"Dijkstra initialized with source:\", this.dijkstraSource); // 调试信息\n                }\n                if (this.dijkstra.step()) {\n                    // 如果算法未结束，更新距离数据\n                    this.dijkstraDistances = { ...this.dijkstra.distances };\n                    console.log(\"Updated dijkstraDistances:\", this.dijkstraDistances); // 调试信息\n\n                    // 动态标记有用和无用的边\n                    this.dijkstra.markUsefulEdges();\n                } else {\n                    window.alert(\"算法已运行完毕\");\n                    // 最后一步也需要更新距离数据\n                    this.dijkstraDistances = { ...this.dijkstra.distances };\n                    console.log(\"Final dijkstraDistances:\", this.dijkstraDistances); // 调试信息\n\n                    // 标记有用和无用的边\n                    this.dijkstra.markUsefulEdges();\n                }\n            }\n        },\n        drawBack() {\n            if (!this.graphDraw.drawBack()) {\n                window.alert(\"无更多可撤销绘制\");\n            }\n        },\n        addEdge() {\n            if (this.source == null || this.target == null || this.val == null) {\n                window.alert(\"边未设置\");\n                return;\n            }\n            if (!this.graphDraw.nodes.includes(this.source) || !this.graphDraw.nodes.includes(this.target)) {\n                window.alert(\"节点不存在\");\n                return;\n            }\n            if (edgeIncludes(this.graphDraw.edges, { source: this.source, target: this.target, selectState: false })\n                || edgeIncludes(this.graphDraw.edges, { source: this.source, target: this.target, selectState: true })) {\n                window.alert(\"边已存在\")\n                return;\n            }\n            if (this.source == this.target) {\n                window.alert(\"无法添加自旋边\");\n                return;\n            }\n            if (isNumericString(this.val) && Number(this.val) <= 0) {\n                window.alert(\"权值错误，必须>0的整数\");\n                return;\n            }\n            this.graphDraw.addEdge(this.source, this.target, this.val);\n            this.updateNodes(); // 更新节点列表\n        },\n        updateNodes() {\n            this.nodes = this.graphDraw.nodes.map(id => id.toString()); // 使用简单的字符串数组\n            console.log(\"Updated nodes:\", this.nodes); // 调试输出\n        },\n    },\n    mounted() {\n        this.graphDraw = new GraphDraw(\"mountNode\");\n        this.graphDraw.graph.data(this.data);\n        this.graphDraw.graph.render();\n        this.updateNodes(); // 初始化节点列表\n\n        console.log(\"Initial nodes:\", this.graphDraw.nodes);\n        console.log(\"Initial edges:\", this.graphDraw.edges);\n\n        // 监听节点添加事件，更新节点列表\n        this.graphDraw.graph.on(\"node:added\", () => {\n            this.updateNodes();\n        });\n\n        // 如果有初始节点，确保它们被加载\n        if (this.graphDraw.nodes.length > 0) {\n            this.updateNodes();\n        }\n\n        // 手动设置 dijkstraDistances 以测试表格（可选）\n        // this.dijkstraDistances = { \"1\": 0, \"2\": 3 };\n        // console.log(\"Manually set dijkstraDistances:\", this.dijkstraDistances);\n    }\n}\n</script>\n\n<style>\n/* Hide scrollbar and make the container fill the parent */\n#mountNode {\n    overflow: hidden;\n    margin: 0;\n}\n\n.dom-node {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    /* 确保文本居中显示 */\n    overflow: hidden;\n    /* 防止文本溢出 */\n}\n\n/* 添加表格样式 */\ntable {\n    width: 100%;\n    border-collapse: collapse;\n}\n\nth,\ntd {\n    border: 1px solid #8a8a8a;\n    padding: 8px;\n    text-align: center;\n}\n\nth {\n    background-color: #f2f2f2;\n}\n</style>\n","import { copy } from \"@/utils/tree_funcs\";\n\nexport class Kruskal{\n    constructor(graphDraw){\n        this.graphDraw=graphDraw;\n        this.nodes=[];\n        this.added_nodes=[];\n        this.added_edges=[];\n        for(let i=0;i<=this.graphDraw.nodes.length;i++){\n            this.nodes.push({\n                id:String(i),\n                selectState:false,\n                root:String(i)\n            })\n        }\n        this.edges=copy(this.graphDraw.edges);\n        this.idCounter=0;\n        this.edges.sort((a,b)=>b.val-a.val);\n        console.log(this.edges);\n    }\n    /**\n     * 并查集的查找  \n     * @returns 节点的根\n     */\n    find(index){\n        if(this.nodes[index].root==index){\n            return index;\n        }else{\n            this.nodes[index].root=this.find(this.nodes[index].root);\n            //更新图\n            this.graphDraw.setNode(copy(this.nodes[index]));\n            return this.nodes[index].root;\n        }\n    }\n    /**\n     * 并查集的合并 \n     */\n    combine(a,b){\n        var root_a=this.find(a);\n        var root_b=this.find(b);\n        if(root_a==root_b){\n            return;\n        }else{\n            this.nodes[root_a].root=this.nodes[root_b].root;\n            //更新图\n            this.graphDraw.setNode(copy(this.nodes[root_a]));\n        }\n    }\n    /**\n     * 执行算法的一步\n     * @returns bool 如果为false则说明算法已经运行完毕\n     */\n    step(){\n        if(this.added_edges.length==this.nodes.length-2){\n            return false;\n        }else{\n            var edge=this.edges.pop();\n            if(this.find(edge.source)==this.find(edge.target)){\n                edge.selectState=2;\n                this.graphDraw.setEdge(copy(edge));\n                return true;\n            }else{\n                this.combine(edge.source,edge.target);\n                edge.selectState=1;\n                this.nodes[edge.source].selectState=true;\n                this.nodes[edge.target].selectState=true;\n                this.added_edges.push(copy(edge));\n                this.graphDraw.setEdge(copy(edge));\n                this.graphDraw.setNode(copy(this.nodes[edge.source]));\n                this.graphDraw.setNode(copy(this.nodes[edge.target]));\n            }\n            return true;\n        }\n    }\n}","// @/algorithm/Dijkstra.js\nimport { copy } from \"@/utils/tree_funcs\";\n\nexport class Dijkstra {\n    constructor(graphDraw, source) {\n        this.graphDraw = graphDraw;\n        this.source = source;\n        this.nodes = {};\n        this.edges = copy(this.graphDraw.edges);\n        this.visited = new Set();\n        this.distances = {};\n        this.previous = {};\n        this.queue = new Set();\n        \n        // 初始化节点数据\n        this.graphDraw.nodes.forEach(nodeId => {\n            this.distances[nodeId] = Infinity;\n            this.previous[nodeId] = null;\n            this.nodes[nodeId] = {\n                id: nodeId,\n                distance: Infinity,\n                selectState: false,\n            };\n        });\n        this.distances[source] = 0;\n        this.nodes[source].distance = 0;\n        this.queue = new Set(this.graphDraw.nodes);\n        \n        // 更新起始节点显示\n        this.graphDraw.setNode(copy(this.nodes[source]));\n    }\n\n    /**\n     * 执行算法的一步\n     * @returns bool 如果为false则说明算法已经运行完毕\n     */\n    step() {\n        if (this.queue.size === 0) {\n            return false;\n        }\n\n        // 找到距离最小的节点\n        let current = null;\n        let minDistance = Infinity;\n        this.queue.forEach(nodeId => {\n            if (this.distances[nodeId] < minDistance) {\n                minDistance = this.distances[nodeId];\n                current = nodeId;\n            }\n        });\n\n        if (current === null) {\n            return false;\n        }\n\n        // 标记当前节点为已访问\n        this.queue.delete(current);\n        this.visited.add(current);\n        this.nodes[current].selectState = true;\n        this.graphDraw.setNode(copy(this.nodes[current]));\n\n        // 遍历当前节点的邻居\n        this.edges.forEach(edge => {\n            if (edge.source === current || edge.target === current) {\n                const neighbor = edge.source === current ? edge.target : edge.source;\n                if (!this.visited.has(neighbor)) {\n                    const alt = this.distances[current] + Number(edge.val);\n                    if (alt < this.distances[neighbor]) {\n                        this.distances[neighbor] = alt;\n                        this.previous[neighbor] = current;\n                        this.nodes[neighbor].distance = alt;\n                        this.graphDraw.setNode(copy(this.nodes[neighbor]));\n                        // 更新边的显示，例如显示最短路径的边\n                        this.graphDraw.setEdge({\n                            source: edge.source,\n                            target: edge.target,\n                            selectState: 1, // 选中状态 (绿色)\n                            val: edge.val\n                        });\n                    }\n                }\n            }\n        });\n\n        return true;\n    }\n\n    /**\n     * 回溯并标记有用的边\n     */\n    markUsefulEdges() {\n        const usefulEdges = new Set();\n\n        // 回溯所有节点的前驱节点，标记有用的边\n        Object.keys(this.previous).forEach(nodeId => {\n            const prev = this.previous[nodeId];\n            if (prev !== null) {\n                // 创建一个唯一的边标识，可以考虑源和目标的组合\n                const edgeKey1 = `${prev}-${nodeId}`;\n                const edgeKey2 = `${nodeId}-${prev}`;\n                usefulEdges.add(edgeKey1);\n                usefulEdges.add(edgeKey2);\n            }\n        });\n\n        // 遍历所有边，标记有用和无用的边\n        this.edges.forEach(edge => {\n            const edgeKey = `${edge.source}-${edge.target}`;\n            const edgeKeyReverse = `${edge.target}-${edge.source}`;\n            if (usefulEdges.has(edgeKey) || usefulEdges.has(edgeKeyReverse)) {\n                // 标记为有用的边（绿色）\n                this.graphDraw.setEdge({\n                    source: edge.source,\n                    target: edge.target,\n                    selectState: 1, // 绿色\n                    val: edge.val\n                });\n            } else {\n                // 标记为无用的边（灰色）\n                this.graphDraw.setEdge({\n                    source: edge.source,\n                    target: edge.target,\n                    selectState: 0, // 灰色\n                    val: edge.val\n                });\n            }\n        });\n    }\n}\n","// @/utils/kruskal_graph.js\n/* eslint-disable */\nimport G6 from '@antv/g6';\n\nclass GraphDraw {\n  constructor(containerId) {\n    this.idCounter = 1;\n    this.nodes = [];\n    this.edges = [];\n    this.drawStack = [];\n    this.UNSELECTED_COLOR = \"#ffffff\"; // 修改为白色\n    this.SELECTED_COLOR = \"#00804b\"; // 绿色\n    this.UNVISIT_COLOR = \"#aaaaaa\"; // 灰色\n    this.graph = this.createGraph(containerId);\n  }\n\n  // 获取唯一ID\n  getIdCounter() {\n    return String(this.idCounter++);\n  }\n\n  //获取当前所有节点\n  getNodes() {\n    return this.nodes;\n  }\n\n  //获取当前所有边\n  getEdges() {\n    return this.edges;\n  }\n\n  //创建Graph实例\n  createGraph(containerId) {\n    G6.registerNode('dom-node', {\n      draw: (cfg, group) => {\n        const distanceText = cfg.distance !== null && cfg.distance !== undefined ? `距离: ${cfg.distance}` : '';\n        const shape = group.addShape('dom', {\n          attrs: {\n            width: cfg.size[0],\n            height: cfg.size[1],\n            html: `\n            <div id=${cfg.id} class='dom-node' style=\"background-color: #fff; border: 2px solid ${cfg.stateColor}; border-radius: 5px; width: ${cfg.size[0] - 5}px; height: ${cfg.size[1] - 5}px; display: flex; flex-direction: column; justify-content: center; align-items: center;\">\n              <div style=\"display:flex;flex-direction:row;justify-content:center; width: 100%;\">\n                <span style=\"font-size:18px;font-weight:bold;color:#ffffff; background-color: ${cfg.stateColor}; padding: 5px; border-radius: 3px;\">${cfg.id}</span>\n              </div>\n              <div style=\"display:flex;flex-direction:column;justify-content:center; align-items: center; margin-top: 5px;\">\n                <div style=\"font-size:14px;color:#000000;\">root:${cfg.root}</div>\n                ${distanceText ? `<div style=\"font-size:14px;color:#000000;\">${distanceText}</div>` : ''}\n              </div>\n            </div>\n            `,\n          },\n          draggable: true,\n        });\n        return shape;\n      },\n    });\n\n    const graph = new G6.Graph({\n      container: containerId,\n      width: 1200,\n      height: 800,\n      fitCenter: true,\n      renderer: 'svg',\n      linkCenter: true,\n      modes: {\n        default: [\n          {\n            type: 'collapse-expand',\n            onChange: function (item, collapsed) {\n              const nodeData = item.get('model').data;\n              nodeData.collapsed = collapsed;\n              return true;\n            },\n          },\n          'drag-canvas',\n          'zoom-canvas',\n        ],\n      },\n      animate: true,\n      animateCfg: {\n        duration: 500, // Number，一次动画的时长\n        easing: 'linearEasing', // String，动画函数\n      },\n    });\n\n    graph.on(\"dblclick\", evt => {\n      const model = {\n        id: this.getIdCounter(),\n        x: evt.x,\n        y: evt.y,\n      };\n      graph.addItem(\"node\", model);\n      this.drawStack.push({ type: \"node\", id: model.id});\n      this.nodes.push(model.id);\n      // 触发自定义事件，通知外部更新节点列表\n      graph.emit('node:added');\n    });\n\n    graph.node((node) => {\n      return this.convertNode(node);\n    });\n    graph.edge((edge) => {\n      return this.convertEdge(edge);\n    });\n\n    return graph;\n  }\n\n  convertEdge(edge){\n    var edgeColor = null;\n    switch(edge.selectState){\n      case 0:\n        edgeColor = this.UNVISIT_COLOR; // 灰色\n        break;\n      case 1:\n        edgeColor = this.SELECTED_COLOR; // 绿色\n        break;\n      default:\n        edgeColor = this.UNVISIT_COLOR;\n    }\n    return {\n      source: edge.source,\n      target: edge.target,\n      type: 'line',\n      style: {\n        stroke: edgeColor,\n        lineWidth: 3,\n      },\n      label: edge.val,\n      labelCfg:{\n        style:{\n          fill: edgeColor,\n          fontWeight:'bold',\n          fontSize:'14px', // 调整字体大小\n        },\n        refX:10,\n        refY:10\n      },\n      state: {},\n      palette: {},\n    }\n  }\n\n  // 转换节点格式\n  convertNode(node) {\n    let displayDistance = '';\n    if (node.distance !== undefined && node.distance !== null) {\n      displayDistance = `距离: ${node.distance}`;\n    }\n    return {\n      type: 'dom-node',\n      stateColor: node.selectState ? this.SELECTED_COLOR : this.UNVISIT_COLOR,\n      size: [120, 80], // 增加节点高度\n      root: node.root !== undefined ? node.root : node.id,\n      id: node.id,\n      distance: node.distance !== undefined ? node.distance : null,\n      label: node.distance !== undefined ? `root:${node.root}\\n距离:${node.distance}` : `root:${node.root}`,\n    };\n  }\n\n  // 查找边\n  findEdge(edge_) {\n    return this.graph.find('edge', (edge) => {\n      return edge.get('model').source === edge_.source && edge.get('model').target === edge_.target;\n    });\n  }\n\n  // 回溯操作\n  drawBack() {\n    if (this.drawStack.length === 0) {\n      return false;\n    }\n    const item = this.drawStack.pop();\n    if (item.type == \"node\") {\n      this.idCounter--;\n      this.nodes.pop();\n      this.graph.removeItem(item.id);\n    } else {\n      this.edges.pop();\n      const model = this.findEdge(item.edge);\n      this.graph.removeItem(model);\n    }\n    return true;\n  }\n  \n  // 添加边\n  addEdge(source, target, val) {\n    this.graph.addItem(\"edge\", { source: source, target: target, selectState:0, val:val });\n    this.edges.push({ source: source, target: target, selectState:0, val:val });\n    this.drawStack.push({ type: \"edge\", edge: { source: source, target: target, selectState:0, val:val } });\n  }\n\n  /**\n   * 在kruskal算法中，所有的边分为3种 已选中,未访问，访问未选中\n   * 传入参数1，0，2 代表选中/未访问/访问未选中\n   * {\n   *  source\n   *  target\n   *  selectstate\n   * }\n   */\n  setEdge(edge) {\n    this.graph.updateItem(this.findEdge(edge), this.convertEdge(edge));\n  }\n\n  /**\n   * 在kruskal算法中，节点需要更新的状态有\n   * 1.是否选中\n   * 2.并查集根\n   * 传入{\n   *  id\n   *  root\n   *  selectState\n   *  distance (可选)\n   * }\n   */\n  setNode(node){\n    var tmp = this.convertNode(node);\n    tmp.root = node.root;\n    tmp.distance = node.distance !== undefined ? node.distance : tmp.distance;\n    this.graph.updateItem(node.id, tmp);\n  }\n\n}\n\nexport default GraphDraw;\n","export function dictIncludes(arr,dict){\n    for(let i=0;i<arr.length;i++){\n        if(JSON.stringify(arr[i])==JSON.stringify(dict)){\n            return true;\n        }\n    }\n    return false;\n}\nexport function edgeIncludes(edges,edge){\n    for(let i=0;i<edges.length;i++){\n        if(edges[i].source==edge.source&&edges[i].target==edge.target){\n            return true;\n        }\n    }\n    return false;\n}","import { render } from \"./MapPage.vue?vue&type=template&id=f95fa3be\"\nimport script from \"./MapPage.vue?vue&type=script&lang=js\"\nexport * from \"./MapPage.vue?vue&type=script&lang=js\"\n\nimport \"./MapPage.vue?vue&type=style&index=0&id=f95fa3be&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["style","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","id","_hoisted_3","_hoisted_4","_createTextVNode","_createVNode","_component_v_select","variant","modelValue","$data","algorithm","_cache","$event","label","density","items","_hoisted_5","dijkstraSource","nodes","_createCommentVNode","_component_v_btn","onClick","$options","step","default","_withCtx","_","ifRun","_hoisted_6","_hoisted_7","_component_v_text_field","source","target","val","addEdge","drawBack","_hoisted_8","_toDisplayString","_Fragment","_renderList","distanceItems","item","node","distance","Kruskal","constructor","graphDraw","this","added_nodes","added_edges","i","length","push","String","selectState","root","edges","copy","idCounter","sort","a","b","console","log","find","index","setNode","combine","root_a","root_b","edge","pop","setEdge","Dijkstra","visited","Set","distances","previous","queue","forEach","nodeId","Infinity","size","current","minDistance","delete","add","neighbor","has","alt","Number","markUsefulEdges","usefulEdges","Object","keys","prev","edgeKey1","edgeKey2","edgeKey","edgeKeyReverse","GraphDraw","containerId","drawStack","UNSELECTED_COLOR","SELECTED_COLOR","UNVISIT_COLOR","graph","createGraph","getIdCounter","getNodes","getEdges","G6","draw","cfg","group","distanceText","undefined","shape","addShape","attrs","width","height","html","stateColor","draggable","container","fitCenter","renderer","linkCenter","modes","type","onChange","collapsed","nodeData","get","data","animate","animateCfg","duration","easing","on","evt","model","x","y","addItem","emit","convertNode","convertEdge","edgeColor","stroke","lineWidth","labelCfg","fill","fontWeight","fontSize","refX","refY","state","palette","displayDistance","findEdge","edge_","removeItem","updateItem","tmp","edgeIncludes","name","file","kruskal","dijkstra","dijkstraDistances","distanceHeaders","text","value","computed","map","methods","window","alert","includes","isNumericString","updateNodes","toString","mounted","render","__exports__"],"sourceRoot":""}