"use strict";(self["webpackChunktree_visualize"]=self["webpackChunktree_visualize"]||[]).push([[916],{5916:function(t,e,s){s.r(e),s.d(e,{default:function(){return b}});var i=s(6768),a=s(4232);const r={style:{display:"flex","flex-direction":"column","min-width":"1500px",overflow:"scroll"}},d={style:{display:"flex","flex-direction":"row-reverse",overflow:"scroll","justify-content":"center"}},o={style:{display:"flex","flex-direction":"column","margin-right":"20px",width:"350px"}},n={style:{display:"flex","flex-direction":"column"}},l={key:0,style:{"margin-top":"10px"}},h={key:0,style:{display:"flex","flex-direction":"column"}},c={style:{display:"flex","flex-direction":"row","justify-content":"center","margin-top":"10px",width:"300px"}},u={key:1,style:{"margin-top":"20px"}};function g(t,e,s,g,p,f){const w=(0,i.g2)("v-select"),m=(0,i.g2)("v-btn"),k=(0,i.g2)("v-text-field");return(0,i.uX)(),(0,i.CE)("main",r,[e[13]||(e[13]=(0,i.Lk)("div",{style:{display:"flex","font-size":"20px",color:"#4a4a4a","font-weight":"bold",padding:"10px",width:"100%","flex-direction":"row"}},[(0,i.Lk)("span",null,"图算法可视化")],-1)),e[14]||(e[14]=(0,i.Lk)("div",{style:{height:"2px","background-color":"#8a8a8a","margin-bottom":"20px",width:"100%"}},null,-1)),(0,i.Lk)("div",d,[e[12]||(e[12]=(0,i.Lk)("div",{id:"mountNode",style:{"border-radius":"10px",border:"2px #8a8a8a solid",width:"1200px",height:"800px","margin-right":"20px"}},null,-1)),(0,i.Lk)("div",o,[(0,i.Lk)("div",n,[e[6]||(e[6]=(0,i.Lk)("div",{style:{"font-size":"20px","font-weight":"bold"}},[(0,i.eW)(" 算法部分"),(0,i.Lk)("br"),(0,i.Lk)("span",{style:{"font-size":"18px"}}," 逐步运行算法 ")],-1)),(0,i.bF)(w,{variant:"outlined",modelValue:p.algorithm,"onUpdate:modelValue":e[0]||(e[0]=t=>p.algorithm=t),label:"选择算法",density:"compact",style:{"max-height":"60px",width:"300px","margin-top":"10px"},items:["Kruskal最小生成树","Dijkstra最短路径"]},null,8,["modelValue"]),"Dijkstra最短路径"===p.algorithm?((0,i.uX)(),(0,i.CE)("div",l,[(0,i.bF)(w,{variant:"outlined",modelValue:p.dijkstraSource,"onUpdate:modelValue":e[1]||(e[1]=t=>p.dijkstraSource=t),label:"选择起始节点",density:"compact",style:{"max-height":"60px",width:"300px"},items:p.nodes},null,8,["modelValue","items"])])):(0,i.Q3)("",!0),(0,i.bF)(m,{onClick:f.step,variant:"tonal",style:{width:"300px","margin-bottom":"10px"}},{default:(0,i.k6)((()=>e[5]||(e[5]=[(0,i.eW)("执行算法")]))),_:1},8,["onClick"])]),p.ifRun?(0,i.Q3)("",!0):((0,i.uX)(),(0,i.CE)("div",h,[e[9]||(e[9]=(0,i.Lk)("div",{style:{"font-size":"20px","font-weight":"bold"}},[(0,i.eW)(" 绘制部分"),(0,i.Lk)("br"),(0,i.Lk)("span",{style:{"font-size":"18px"}}," 双击画布创建新节点 ")],-1)),(0,i.Lk)("div",c,[(0,i.bF)(k,{variant:"outlined",modelValue:p.source,"onUpdate:modelValue":e[2]||(e[2]=t=>p.source=t),label:"起始",density:"compact",style:{"max-height":"60px","max-width":"150px","margin-right":"10px"}},null,8,["modelValue"]),(0,i.bF)(k,{variant:"outlined",modelValue:p.target,"onUpdate:modelValue":e[3]||(e[3]=t=>p.target=t),label:"终止",density:"compact",style:{"max-height":"60px","max-width":"150px"}},null,8,["modelValue"]),(0,i.bF)(k,{variant:"outlined",modelValue:p.val,"onUpdate:modelValue":e[4]||(e[4]=t=>p.val=t),label:"权值",density:"compact",style:{"max-height":"60px","max-width":"150px"}},null,8,["modelValue"])]),(0,i.bF)(m,{onClick:f.addEdge,variant:"tonal",style:{width:"300px","margin-top":"10px"}},{default:(0,i.k6)((()=>e[7]||(e[7]=[(0,i.eW)("添加边")]))),_:1},8,["onClick"]),(0,i.bF)(m,{onClick:f.drawBack,variant:"tonal",style:{width:"300px","margin-top":"10px"}},{default:(0,i.k6)((()=>e[8]||(e[8]=[(0,i.eW)("撤销绘制")]))),_:1},8,["onClick"])])),"Dijkstra最短路径"===p.algorithm?((0,i.uX)(),(0,i.CE)("div",u,[(0,i.Lk)("div",null,"当前算法: "+(0,a.v_)(p.algorithm),1),e[11]||(e[11]=(0,i.Lk)("div",{style:{"font-size":"20px","font-weight":"bold"}}," 距离表 ",-1)),(0,i.Lk)("table",null,[e[10]||(e[10]=(0,i.Lk)("thead",null,[(0,i.Lk)("tr",null,[(0,i.Lk)("th",null,"节点"),(0,i.Lk)("th",null,"距离")])],-1)),(0,i.Lk)("tbody",null,[((0,i.uX)(!0),(0,i.CE)(i.FK,null,(0,i.pI)(f.distanceItems,(t=>((0,i.uX)(),(0,i.CE)("tr",{key:t.node},[(0,i.Lk)("td",null,(0,a.v_)(t.node),1),(0,i.Lk)("td",null,(0,a.v_)(t.distance),1)])))),128))])])])):(0,i.Q3)("",!0)])])])}s(1454),s(4114),s(8992),s(2577);var p=s(5029);class f{constructor(t){this.graphDraw=t,this.nodes=[],this.added_nodes=[],this.added_edges=[];for(let e=0;e<=this.graphDraw.nodes.length;e++)this.nodes.push({id:String(e),selectState:!1,root:String(e)});this.edges=(0,p.C)(this.graphDraw.edges),this.idCounter=0,this.edges.sort(((t,e)=>e.val-t.val)),console.log(this.edges)}find(t){return this.nodes[t].root==t?t:(this.nodes[t].root=this.find(this.nodes[t].root),this.graphDraw.setNode((0,p.C)(this.nodes[t])),this.nodes[t].root)}combine(t,e){var s=this.find(t),i=this.find(e);s!=i&&(this.nodes[s].root=this.nodes[i].root,this.graphDraw.setNode((0,p.C)(this.nodes[s])))}step(){if(this.added_edges.length==this.nodes.length-2)return!1;var t=this.edges.pop();return this.find(t.source)==this.find(t.target)?(t.selectState=2,this.graphDraw.setEdge((0,p.C)(t)),!0):(this.combine(t.source,t.target),t.selectState=1,this.nodes[t.source].selectState=!0,this.nodes[t.target].selectState=!0,this.added_edges.push((0,p.C)(t)),this.graphDraw.setEdge((0,p.C)(t)),this.graphDraw.setNode((0,p.C)(this.nodes[t.source])),this.graphDraw.setNode((0,p.C)(this.nodes[t.target])),!0)}}s(7642),s(8004),s(3853),s(5876),s(2475),s(5024),s(1698),s(3949);class w{constructor(t,e){this.graphDraw=t,this.source=e,this.nodes={},this.edges=(0,p.C)(this.graphDraw.edges),this.visited=new Set,this.distances={},this.previous={},this.queue=new Set,this.graphDraw.nodes.forEach((t=>{this.distances[t]=1/0,this.previous[t]=null,this.nodes[t]={id:t,distance:1/0,selectState:!1}})),this.distances[e]=0,this.nodes[e].distance=0,this.queue=new Set(this.graphDraw.nodes),this.graphDraw.setNode((0,p.C)(this.nodes[e]))}step(){if(0===this.queue.size)return!1;let t=null,e=1/0;return this.queue.forEach((s=>{this.distances[s]<e&&(e=this.distances[s],t=s)})),null!==t&&(this.queue.delete(t),this.visited.add(t),this.nodes[t].selectState=!0,this.graphDraw.setNode((0,p.C)(this.nodes[t])),this.edges.forEach((e=>{if(e.source===t||e.target===t){const s=e.source===t?e.target:e.source;if(!this.visited.has(s)){const i=this.distances[t]+Number(e.val);i<this.distances[s]&&(this.distances[s]=i,this.previous[s]=t,this.nodes[s].distance=i,this.graphDraw.setNode((0,p.C)(this.nodes[s])),this.graphDraw.setEdge({source:e.source,target:e.target,selectState:1,val:e.val}))}}})),!0)}markUsefulEdges(){const t=new Set;Object.keys(this.previous).forEach((e=>{const s=this.previous[e];if(null!==s){const i=`${s}-${e}`,a=`${e}-${s}`;t.add(i),t.add(a)}})),this.edges.forEach((e=>{const s=`${e.source}-${e.target}`,i=`${e.target}-${e.source}`;t.has(s)||t.has(i)?this.graphDraw.setEdge({source:e.source,target:e.target,selectState:1,val:e.val}):this.graphDraw.setEdge({source:e.source,target:e.target,selectState:0,val:e.val})}))}}var m=s(636);class k{constructor(t){this.idCounter=1,this.nodes=[],this.edges=[],this.drawStack=[],this.UNSELECTED_COLOR="#ffffff",this.SELECTED_COLOR="#00804b",this.UNVISIT_COLOR="#aaaaaa",this.graph=this.createGraph(t)}getIdCounter(){return String(this.idCounter++)}getNodes(){return this.nodes}getEdges(){return this.edges}createGraph(t){m.Ay.registerNode("dom-node",{draw:(t,e)=>{const s=null!==t.distance&&void 0!==t.distance?`距离: ${t.distance}`:"",i=e.addShape("dom",{attrs:{width:t.size[0],height:t.size[1],html:`\n            <div id=${t.id} class='dom-node' style="background-color: #fff; border: 2px solid ${t.stateColor}; border-radius: 5px; width: ${t.size[0]-5}px; height: ${t.size[1]-5}px; display: flex; flex-direction: column; justify-content: center; align-items: center;">\n              <div style="display:flex;flex-direction:row;justify-content:center; width: 100%;">\n                <span style="font-size:18px;font-weight:bold;color:#ffffff; background-color: ${t.stateColor}; padding: 5px; border-radius: 3px;">${t.id}</span>\n              </div>\n              <div style="display:flex;flex-direction:column;justify-content:center; align-items: center; margin-top: 5px;">\n                <div style="font-size:14px;color:#000000;">root:${t.root}</div>\n                ${s?`<div style="font-size:14px;color:#000000;">${s}</div>`:""}\n              </div>\n            </div>\n            `},draggable:!0});return i}});const e=new m.Ay.Graph({container:t,width:1200,height:800,fitCenter:!0,renderer:"svg",linkCenter:!0,modes:{default:[{type:"collapse-expand",onChange:function(t,e){const s=t.get("model").data;return s.collapsed=e,!0}},"drag-canvas","zoom-canvas"]},animate:!0,animateCfg:{duration:500,easing:"linearEasing"}});return e.on("dblclick",(t=>{const s={id:this.getIdCounter(),x:t.x,y:t.y};e.addItem("node",s),this.drawStack.push({type:"node",id:s.id}),this.nodes.push(s.id),e.emit("node:added")})),e.node((t=>this.convertNode(t))),e.edge((t=>this.convertEdge(t))),e}convertEdge(t){var e=null;switch(t.selectState){case 0:e=this.UNVISIT_COLOR;break;case 1:e=this.SELECTED_COLOR;break;default:e=this.UNVISIT_COLOR}return{source:t.source,target:t.target,type:"line",style:{stroke:e,lineWidth:3},label:t.val,labelCfg:{style:{fill:e,fontWeight:"bold",fontSize:"14px"},refX:10,refY:10},state:{},palette:{}}}convertNode(t){let e="";return void 0!==t.distance&&null!==t.distance&&(e=`距离: ${t.distance}`),{type:"dom-node",stateColor:t.selectState?this.SELECTED_COLOR:this.UNVISIT_COLOR,size:[120,80],root:void 0!==t.root?t.root:t.id,id:t.id,distance:void 0!==t.distance?t.distance:null,label:void 0!==t.distance?`root:${t.root}\n距离:${t.distance}`:`root:${t.root}`}}findEdge(t){return this.graph.find("edge",(e=>e.get("model").source===t.source&&e.get("model").target===t.target))}drawBack(){if(0===this.drawStack.length)return!1;const t=this.drawStack.pop();if("node"==t.type)this.idCounter--,this.nodes.pop(),this.graph.removeItem(t.id);else{this.edges.pop();const e=this.findEdge(t.edge);this.graph.removeItem(e)}return!0}addEdge(t,e,s){this.graph.addItem("edge",{source:t,target:e,selectState:0,val:s}),this.edges.push({source:t,target:e,selectState:0,val:s}),this.drawStack.push({type:"edge",edge:{source:t,target:e,selectState:0,val:s}})}setEdge(t){this.graph.updateItem(this.findEdge(t),this.convertEdge(t))}setNode(t){var e=this.convertNode(t);e.root=t.root,e.distance=void 0!==t.distance?t.distance:e.distance,this.graph.updateItem(t.id,e)}}var v=k;function x(t,e){for(let s=0;s<t.length;s++)if(t[s].source==e.source&&t[s].target==e.target)return!0;return!1}var y={name:"TreeGraph",data(){return{data:{nodes:[],edges:[]},graphDraw:null,file:null,algorithm:null,source:null,target:null,val:null,ifRun:!1,kruskal:null,dijkstra:null,dijkstraSource:null,nodes:[],dijkstraDistances:{},distanceHeaders:[{text:"节点",value:"node"},{text:"距离",value:"distance"}]}},computed:{distanceItems(){const t=Object.keys(this.dijkstraDistances).map((t=>({node:t,distance:this.dijkstraDistances[t]===1/0?"∞":this.dijkstraDistances[t]})));return console.log("Computed distanceItems:",t),t}},methods:{step(){if(null!=this.algorithm){if("Kruskal最小生成树"===this.algorithm)0==this.ifRun&&(this.ifRun=!0,this.kruskal=new f(this.graphDraw)),this.kruskal.step()||window.alert("算法已运行完毕");else if("Dijkstra最短路径"===this.algorithm){if(console.log("Before any updates, dijkstraDistances:",this.dijkstraDistances),null==this.dijkstraSource)return void window.alert("请选择 Dijkstra 的起始节点");0==this.ifRun&&(this.ifRun=!0,this.dijkstra=new w(this.graphDraw,this.dijkstraSource),console.log("Dijkstra initialized with source:",this.dijkstraSource)),this.dijkstra.step()?(this.dijkstraDistances={...this.dijkstra.distances},console.log("Updated dijkstraDistances:",this.dijkstraDistances),this.dijkstra.markUsefulEdges()):(window.alert("算法已运行完毕"),this.dijkstraDistances={...this.dijkstra.distances},console.log("Final dijkstraDistances:",this.dijkstraDistances),this.dijkstra.markUsefulEdges())}}else window.alert("选择一个算法")},drawBack(){this.graphDraw.drawBack()||window.alert("无更多可撤销绘制")},addEdge(){null!=this.source&&null!=this.target&&null!=this.val?this.graphDraw.nodes.includes(this.source)&&this.graphDraw.nodes.includes(this.target)?x(this.graphDraw.edges,{source:this.source,target:this.target,selectState:!1})||x(this.graphDraw.edges,{source:this.source,target:this.target,selectState:!0})?window.alert("边已存在"):this.source!=this.target?(0,p.P3)(this.val)&&Number(this.val)<=0?window.alert("权值错误，必须>0的整数"):(this.graphDraw.addEdge(this.source,this.target,this.val),this.updateNodes()):window.alert("无法添加自旋边"):window.alert("节点不存在"):window.alert("边未设置")},updateNodes(){this.nodes=this.graphDraw.nodes.map((t=>t.toString())),console.log("Updated nodes:",this.nodes)}},mounted(){this.graphDraw=new v("mountNode"),this.graphDraw.graph.data(this.data),this.graphDraw.graph.render(),this.updateNodes(),console.log("Initial nodes:",this.graphDraw.nodes),console.log("Initial edges:",this.graphDraw.edges),this.graphDraw.graph.on("node:added",(()=>{this.updateNodes()})),this.graphDraw.nodes.length>0&&this.updateNodes()}},D=s(1241);const C=(0,D.A)(y,[["render",g]]);var b=C}}]);
//# sourceMappingURL=916.e97b161d.js.map